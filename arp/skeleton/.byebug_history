c
exit
House.new(results.first)
self
results
n
s
c
n
self
results
n
s
c
n
source_options.class_name.constantize.parse_all(results)
source_options.class_name.parse_all(results)
results
c
source_options
source_name
c
exit
c
exit
through_table
to_match_id
source_foreign_key
through_table
source_primary_key
source_table
c
source_table.source_primary_key
source_primary_key
source_foreign_key
through_foreign_key
through_forign_key
source_table.through_forign_key
source_table
through_primary_key
through_foreign_key
through_table
c
quit
source_foreign_key
source_options
through_options
through_primary_key
through_foreign_key
source_primary_key
through_table
source_table
exit
self.send("#{through_options.foreign_key}")
source_options
through_options
self
self.send("#{:primary_key}")
self.send("#{@primary_key}")
self.send("#{primary_key}")
self
quit
source_options.class_name.constantize.table_name
source_name
source_name.table_name
source_options.class_name.table_name
source_options.foreign_key
source_options
source_name
name
through_options
quit
options.instance_variables.each {|iv| print instance_variable_get("#{iv}") }
options.instance_variables.each {|iv| puts instance_variable_get("#{iv}") }
options.instance_variables.each {|iv| puts instance_variable_get("options(#{iv})") }
options.instance_variables.each {|iv| puts instance_variable_get("options.#{iv}") }
options
options.instance_variables.each {|iv| puts instance_variable_get("#{iv}") }
options.instance_variables.each {|iv| puts instance_variable_get("@#{iv}") }
options.instance_variables.each {|iv| puts instance_variable_get("@#{iv}) }
options.instance_variables.each {|iv| puts instance_variable_get(iv) }
options.instance_variables
options
options.each { |t| puts t }
options
c
quit
options.model_class
options
exit
self_class_name
options
self
c
options
quit
defaults
options
c
n
foreign_key_value
quit
quite
self.send("#{foreign_key}")
self
target_class.where("#{primary_key}" => 1)
target_class.where("#{:primary_key}" => 1)
target_class.where(primary_key: 1)
target_class.where(primary_key = 1)
primary_key
foreign_key
exit
:primary_key
exit
:primary_key
primary_key
:primary_key
target_class
self.send(foreign_key)
foreign_key
self.send(:foreign_key)
options.primary_key
options
self.options
foreign_key
self
quit
target_class
quit
exit
options.send("#{:foreign_key}")
options.send(:foreign_key)
c
options.class_name.constantize
options.class_name
options
c
n
s
:breakfast
breakfast
c
self.foreign_key
self
exit
options
options.options
options
n
c
n
options
n
exit
options
n
c
exit
c
n
options
n
options
c
options
n
options
exit
@options
options.options
options
options.foreign_key
options
n
@options
options
self[options]
self.options
self
@options.foreign_key
name
@options
c
exit
parse_all(results)
results
exit
c
id
exit
values
c
set_line
values
]values
c
set_line
exit
set_line.join(", ")
set_line
c
s
id
s
self
Cat.all
Cat
Cats
c
self.class.table_name
self.table_name
self
c
question_marks.join(", ")
question_marks
question_m
values
exit
question_marks
exit
question_marks
col_names
c
exit
self.class.columns
self.columns
self
exit
self.attributes.values
self.attributes
self
c
exit
parse_all(results)
results
exit
c = self.new
self
results
c
attr_name.to_s
attr_name
c
n
s
exit
"#{col}".to_symexit
"#{col}".to_sym
"#{col}"
col
exit
self
self.send attr_name= value
self
self.send attr_name= vale
self.send attr_name
